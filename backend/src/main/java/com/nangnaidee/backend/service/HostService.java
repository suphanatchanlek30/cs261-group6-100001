// backend/src/main/java/com/nangnaidee/backend/service/HostService.java

package com.nangnaidee.backend.service;

import com.nangnaidee.backend.config.JwtTokenProvider;
import com.nangnaidee.backend.dto.*;
import com.nangnaidee.backend.exception.ForbiddenException;
import com.nangnaidee.backend.exception.NotFoundException;
import com.nangnaidee.backend.exception.UnauthorizedException;
import com.nangnaidee.backend.exception.UnprocessableEntityException;
import com.nangnaidee.backend.model.Location;
import com.nangnaidee.backend.model.LocationUnit;
import com.nangnaidee.backend.model.Role;
import com.nangnaidee.backend.model.User;
import com.nangnaidee.backend.repo.LocationRepository;
import com.nangnaidee.backend.repo.LocationUnitRepository;
import com.nangnaidee.backend.repo.UserRepository;
import io.jsonwebtoken.JwtException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class HostService {

    private final UserRepository userRepository;
    private final JwtTokenProvider jwtTokenProvider;
    private final LocationRepository locationRepository;
    private final LocationUnitRepository locationUnitRepository;

    // ‚≠êÔ∏è ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
    private static final String PENDING_REVIEW_MARKER = "__PENDING__";

    /**
     * Helper ‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á Entity ‡πÄ‡∏õ‡πá‡∏ô Status String
     */
    private String getPublishStatus(Location loc) {
        if (loc.isActive()) {
            return "APPROVED"; // 1. ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß (isActive = true)
        }

        String reason = loc.getRejectReason();
        if (reason == null) {
            return "DRAFT"; // 2. ‡∏£‡πà‡∏≤‡∏á (isActive = false, reason = null)
        }
        if (PENDING_REVIEW_MARKER.equals(reason)) {
            return "PENDING_REVIEW"; // 3. ‡∏£‡∏≠‡∏ï‡∏ß‡∏£‡∏à‡∏™‡∏≠‡∏ö (isActive = false, reason = "__PENDING__")
        }

        return "REJECTED"; // 4. ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (isActive = false, reason = "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
    }

    /**
     * Helper ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô Host (‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Service ‡∏ô‡∏µ‡πâ)
     */
    private User getAuthenticatedHost(String authorizationHeader) {
        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            throw new UnauthorizedException("‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÅ‡∏ö‡∏ö Bearer");
        }
        String token = authorizationHeader.substring("Bearer ".length()).trim();
        Integer userId;
        try {
            userId = jwtTokenProvider.getUserId(token);
        } catch (JwtException | IllegalArgumentException e) {
            throw new UnauthorizedException("‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏");
        }
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new UnauthorizedException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"));
        Set<String> roleCodes = user.getRoles().stream()
                .map(Role::getCode)
                .collect(Collectors.toSet());
        if (!roleCodes.contains("HOST")) {
            throw new ForbiddenException("‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå HOST ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô");
        }
        return user;
    }

    /**
     * (1/6) ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå /me ‡∏Ç‡∏≠‡∏á Host
     */
    public MeResponse getHostProfile(String authorizationHeader) {
        User host = getAuthenticatedHost(authorizationHeader);
        List<String> rolesList = host.getRoles().stream()
                .map(Role::getCode)
                .toList();

        return new MeResponse(
                host.getId(),
                host.getEmail(),
                host.getFullName(),
                rolesList
        );
    }

    /**
     * (2/6) ‡∏™‡∏£‡πâ‡∏≤‡∏á Location ‡∏â‡∏ö‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á (DRAFT) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HOST
     */
    @Transactional
    public CreateDraftLocationResponse createDraftLocation(String authorizationHeader, CreateLocationRequest request) {
        User hostOwner = getAuthenticatedHost(authorizationHeader);

        Location loc = new Location();
        loc.setId(UUID.randomUUID());
        loc.setOwner(hostOwner);
        loc.setName(request.getName());
        loc.setDescription(request.getDescription());
        loc.setAddressText(request.getAddress());
        loc.setGeoLat(request.getGeoLat());
        loc.setGeoLng(request.getGeoLng());
        loc.setCoverImageUrl(request.getCoverImageUrl());
        loc.setActive(false); // DRAFT ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà false
        // rejectReason ‡πÄ‡∏õ‡πá‡∏ô null ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ DRAFT)

        Location saved = locationRepository.save(loc);

        return new CreateDraftLocationResponse(saved.getId(), "DRAFT");
    }

    /**
     * (3/6) ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Host (My Locations)
     */
    @Transactional(readOnly = true)
    public List<HostLocationListItem> getMyLocations(String authorizationHeader, String status) {
        User host = getAuthenticatedHost(authorizationHeader);
        Integer hostId = host.getId();

        List<Location> locations = locationRepository.findByOwnerIdOrderByCreatedAtDesc(hostId);
        String statusUpper = (status == null) ? null : status.trim().toUpperCase();

        return locations.stream()
                .map(loc -> new HostLocationListItem(
                        loc.getId(),
                        loc.getName(),
                        loc.getAddressText(),
                        loc.getCoverImageUrl(),
                        getPublishStatus(loc) // üëà ‡πÉ‡∏ä‡πâ Helper ‡πÉ‡∏´‡∏°‡πà
                ))
                .filter(item -> { // ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ status ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
                    if (statusUpper == null || statusUpper.isBlank()) {
                        return true; // ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á
                    }
                    return item.getStatus().equals(statusUpper);
                })
                .toList();
    }

    /**
     * (4/6) ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á Host (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á)
     */
    @Transactional(readOnly = true)
    public HostLocationDetailResponse getMyLocationDetail(String authorizationHeader, UUID locationId) {
        User host = getAuthenticatedHost(authorizationHeader);
        Location loc = locationRepository.findById(locationId)
                .orElseThrow(() -> new NotFoundException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")); // 404

        if (!loc.getOwner().getId().equals(host.getId())) {
            throw new ForbiddenException("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ"); // 403
        }

        List<LocationUnit> units = locationUnitRepository.findByLocation_IdOrderByCodeAsc(locationId);
        List<HostLocationDetailResponse.UnitItem> unitItems = units.stream()
                .map(u -> new HostLocationDetailResponse.UnitItem(
                        u.getId(), u.getCode(), u.getName(),
                        u.getImageUrl(), u.getShortDesc(),
                        u.getCapacity(), u.getPriceHourly(), u.isActive()
                ))
                .toList();

        String publishStatus = getPublishStatus(loc); // üëà ‡πÉ‡∏ä‡πâ Helper ‡πÉ‡∏´‡∏°‡πà

        return new HostLocationDetailResponse(
                loc.getId(), loc.getName(), loc.getDescription(), loc.getAddressText(),
                loc.getGeoLat(), loc.getGeoLng(), loc.getCoverImageUrl(), loc.getCreatedAt(),
                publishStatus,
                "REJECTED".equals(publishStatus) ? loc.getRejectReason() : null, // üëà ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ Rejected ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                loc.isActive(),
                unitItems
        );
    }

    /**
     * (5/6) ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Location ‡∏â‡∏ö‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á (DRAFT / REJECTED)
     */
    @Transactional
    public HostLocationDetailResponse updateDraftLocation(String authorizationHeader, UUID locationId, UpdateLocationRequest request) {
        User host = getAuthenticatedHost(authorizationHeader);
        Location loc = locationRepository.findById(locationId)
                .orElseThrow(() -> new NotFoundException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"));

        if (!loc.getOwner().getId().equals(host.getId())) {
            throw new ForbiddenException("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ");
        }

        String currentStatus = getPublishStatus(loc); // üëà ‡πÉ‡∏ä‡πâ Helper ‡πÉ‡∏´‡∏°‡πà

        // ‚≠êÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Logic 422
        if ("APPROVED".equals(currentStatus)) {
            throw new UnprocessableEntityException("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (APPROVED) ‡πÅ‡∏•‡πâ‡∏ß");
        }
        if ("PENDING_REVIEW".equals(currentStatus)) {
            throw new UnprocessableEntityException("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (PENDING_REVIEW)");
        }
        // (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï DRAFT ‡πÅ‡∏•‡∏∞ REJECTED)

        boolean changed = false;
        if (request.getName() != null) { loc.setName(request.getName()); changed = true; }
        if (request.getDescription() != null) { loc.setDescription(request.getDescription()); changed = true; }
        if (request.getAddress() != null) { loc.setAddressText(request.getAddress()); changed = true; }
        if (request.getGeoLat() != null) { loc.setGeoLat(request.getGeoLat()); changed = true; }
        if (request.getGeoLng() != null) { loc.setGeoLng(request.getGeoLng()); changed = true; }
        if (request.getCoverImageUrl() != null) { loc.setCoverImageUrl(request.getCoverImageUrl()); changed = true; }

        if (request.getIsActive() != null) {
            throw new UnprocessableEntityException("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° 'Submit for Review' (POST .../submit) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà");
        }

        // ‚≠êÔ∏è ‡∏ñ‡πâ‡∏≤‡πÅ‡∏Å‡πâ REJECTED ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô DRAFT
        if ("REJECTED".equals(currentStatus) && changed) {
            loc.setRejectReason(null); // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏¥‡πâ‡∏á
        }

        if (!changed) {
            throw new UnprocessableEntityException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");
        }

        locationRepository.save(loc);

        // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô DRAFT ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢ REJECTED)
        return getMyLocationDetail(authorizationHeader, locationId);
    }

    /**
     * (6/6) ‡∏™‡πà‡∏á DRAFT/REJECTED location ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Review
     */
    @Transactional
    public SubmitReviewResponse submitForReview(String authorizationHeader, UUID locationId) {
        User host = getAuthenticatedHost(authorizationHeader);
        Location loc = locationRepository.findById(locationId)
                .orElseThrow(() -> new NotFoundException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")); // 404

        if (!loc.getOwner().getId().equals(host.getId())) {
            throw new ForbiddenException("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ"); // 403
        }

        String currentStatus = getPublishStatus(loc);

        switch (currentStatus) {
            case "APPROVED":
                throw new UnprocessableEntityException("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß");
            case "PENDING_REVIEW":
                throw new UnprocessableEntityException("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß");

            case "DRAFT":
            case "REJECTED":
                // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                loc.setActive(false);
                loc.setRejectReason(PENDING_REVIEW_MARKER); // üëà ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô PENDING
                locationRepository.save(loc);
                return new SubmitReviewResponse("PENDING_REVIEW");

            default:
                throw new IllegalStateException("‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å: " + currentStatus);
        }
    }
}